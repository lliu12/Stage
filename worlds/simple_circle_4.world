# simple_circle_4.world world example with 4 robots on a circle facing inward
# Authors: Richard Vaughan
# $Id$

include "traffic_pioneer.inc"
include "map.inc"
include "sick.inc"

# time to pause (in GUI mode) or quit (in headless mode (-g)) the simulation
quit_time 3600 # 1 hour of simulated time

paused 1
periodic 0
periodic_bounds 8

# spatial resolution of the underlying occupancy grid. Default is 0.02m.
resolution 0.02

# set the multiple of real time that Stage should try to achieve. Default is 1. 
# set to 0 to go as fast as possible.
speedup 10.000

# configure the GUI window
window
(
  size [ 635 666 ] # in pixels
  scale 36.995   # pixels per meter
  center [ 0.095  -0.680 ]
  rotate [ 0.000  0.000 ]
  			
  show_data 1              # 1=on 0=off
)

# load an environment bitmap
floorplan
( 
  name "rink"
  size [24.000 24.000 0.800]
  pose [0.000 0.000 0.000 0.000]
  bitmap "bitmaps/rink.png"
)


define agent pioneer2dx
(		  
  # ctrl "noise_with_memory_vector.0 -s 1 -c .3 -l 0 -u 8 -a 1.5 -b 0 -r 40 -t 40 -n true --mem 5"

# ctrl "noise_random_goals.0 -s .8 -c .3 -l 0 -u 8 -a .5 -b 0 -r 40 -t 40 -n true --df_blocked 1 --df_free -.9 --f_threshold 20 --random_runsteps"

#  ctrl "noise_random_goals.0 -s .8 -c .3 -l 0 -u 8 -a .5 -b 0 -r 40 -t 40 -n true --df_blocked 0 --df_free 0 --f_threshold 20 --random_runsteps"

 # ctrl "reset_memory.0 -s .6 -c .3 -l 0 -u 8 -a 0 -b 0 -r 40 -t 40 -n true 0 -f 1"

#  ctrl "reset_memory_fid.0 -s .6 -c .3 -l 0 -u 8 -a 0 -b 0 -r 40 -t 40 -n true 0 -f 1"

# ctrl "flocking_fov.0 -s .8 -c .3 -l 0 -u 8 -a 0 -b 0 -r 0 -t 0 -n true --mem 0 --circle -f .8"

# ctrl "base_robot.0 -s .8 -c .3 -u 8 --circle -n"

#  ctrl "noise_robot.0 -s .8 -c .3 -u 8 -r 40 -t 40 -a 1 -b 0 --random_runsteps --circle -n"

  ctrl "within_last_f_robot.0 -s .8 -c .3 -u 8 -r 40 -t 40 -a -1 -b 0 -f 0 --random_runsteps --circle -n"

  sicklaser( pose [ 0.000 0.000 0.000 0.000 ] ) 

  # report error-free position in world coordinates
  localization "gps"
  localization_origin [ 0 0 0 0 ]


 # fiducial
 # fiducial_return 1
  fiducial( range_max_id 1 range_max 1 fov 120 pose [ 0 0 0 0 ] )

)


agent ( pose [ -5 0 0 0 ] fiducial_return 1)
agent( pose [ 0 -5 0 90 ] fiducial_return 2)
agent( pose [ 0 5 0 270 ] fiducial_return 3)
agent( pose [ 5 0 0 180 ] fiducial_return 4)
